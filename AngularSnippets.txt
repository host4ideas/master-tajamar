--- APP MODULE ---

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';
import { FormsModule } from '@angular/forms';

imports: [BrowserModule, AppRoutingModule, HttpClientModule, FormsModule],

--- APP COMPONENT HTML ---
<style>
  svg.material-icons {
    height: 24px;
    width: auto;
  }

  svg.material-icons:not(:last-child) {
    margin-right: 8px;
  }

  svg#rocket {
    width: 80px;
    position: absolute;
    left: -10px;
    top: -24px;
  }

  svg#rocket-smoke {
    height: calc(100vh - 95px);
    position: absolute;
    top: 10px;
    right: 180px;
    z-index: -10;
  }

  a,
  a:visited,
  a:hover {
    color: #1976d2;
    text-decoration: none;
  }

  a:hover {
    color: #125699;
  }

  .terminal {
    position: relative;
    width: 80%;
    max-width: 600px;
    border-radius: 6px;
    padding-top: 45px;
    margin-top: 8px;
    overflow: hidden;
    background-color: rgb(15, 15, 16);
  }

  .terminal::before {
    content: "\2022 \2022 \2022";
    position: absolute;
    top: 0;
    left: 0;
    height: 4px;
    background: rgb(58, 58, 58);
    color: #c2c3c4;
    width: 100%;
    font-size: 2rem;
    line-height: 0;
    padding: 14px 0;
    text-indent: 4px;
  }

  .terminal pre {
    font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, monospace;
    color: white;
    padding: 0 1rem 1rem;
    margin: 0;
  }

  svg#clouds {
    position: fixed;
    bottom: -160px;
    left: -230px;
    z-index: -10;
    width: 1920px;
  }

  /* Responsive Styles */
  @media screen and (max-width: 767px) {
    .card-container > *:not(.circle-link),
    .terminal {
      width: 100%;
    }

    .card:not(.highlight-card) {
      height: 16px;
      margin: 8px 0;
    }

    .card.highlight-card span {
      margin-left: 72px;
    }

    svg#rocket-smoke {
      right: 120px;
      transform: rotate(-5deg);
    }
  }

  @media screen and (max-width: 575px) {
    svg#rocket-smoke {
      display: none;
      visibility: hidden;
    }
  }
</style>

<div role="main">
  <app-menu></app-menu>
  <router-outlet></router-outlet>

  <svg
    id="clouds"
    xmlns="http://www.w3.org/2000/svg"
    width="2611.084"
    height="485.677"
    viewBox="0 0 2611.084 485.677"
  >
    <title>Gray Clouds Background</title>
    <path
      id="Path_39"
      data-name="Path 39"
      d="M2379.709,863.793c10-93-77-171-168-149-52-114-225-105-264,15-75,3-140,59-152,133-30,2.83-66.725,9.829-93.5,26.25-26.771-16.421-63.5-23.42-93.5-26.25-12-74-77-130-152-133-39-120-212-129-264-15-54.084-13.075-106.753,9.173-138.488,48.9-31.734-39.726-84.4-61.974-138.487-48.9-52-114-225-105-264,15a162.027,162.027,0,0,0-103.147,43.044c-30.633-45.365-87.1-72.091-145.206-58.044-52-114-225-105-264,15-75,3-140,59-152,133-53,5-127,23-130,83-2,42,35,72,70,86,49,20,106,18,157,5a165.625,165.625,0,0,0,120,0c47,94,178,113,251,33,61.112,8.015,113.854-5.72,150.492-29.764a165.62,165.62,0,0,0,110.861-3.236c47,94,178,113,251,33,31.385,4.116,60.563,2.495,86.487-3.311,25.924,5.806,55.1,7.427,86.488,3.311,73,80,204,61,251-33a165.625,165.625,0,0,0,120,0c51,13,108,15,157-5a147.188,147.188,0,0,0,33.5-18.694,147.217,147.217,0,0,0,33.5,18.694c49,20,106,18,157,5a165.625,165.625,0,0,0,120,0c47,94,178,113,251,33C2446.709,1093.793,2554.709,922.793,2379.709,863.793Z"
      transform="translate(142.69 -634.312)"
      fill="#eee"
    />
  </svg>
</div>

--- MENU COMPONENT HTML ---
<nav class="navbar navbar-expand-lg bg-light">
  <div class="container-fluid">
    <a
      class="navbar-brand"
      [routerLink]="['/routePath']"
      routerLinkActive="router-link-active"
    >
      Navbar
    </a>
    <button
      class="navbar-toggler"
      type="button"
      data-bs-toggle="collapse"
      data-bs-target="#navbarSupportedContent"
      aria-controls="navbarSupportedContent"
      aria-expanded="false"
      aria-label="Toggle navigation"
    >
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        <li class="nav-item">
          <a
            class="nav-link"
            [routerLink]="['/routePath']"
            routerLinkActive="router-link-active"
          >
            Link
          </a>
        </li>
        <li class="nav-item dropdown">
          <a
            class="nav-link dropdown-toggle"
            [routerLink]="['/routePath']"
            routerLinkActive="router-link-active"
            role="button"
            data-bs-toggle="dropdown"
            aria-expanded="false"
          >
            Dropdown
          </a>
          <ul class="dropdown-menu">
            <li>
              <a
                class="dropdown-item"
                [routerLink]="['/routePath']"
                routerLinkActive="router-link-active"
              >
                Action
              </a>
            </li>
            <li>
              <a
                class="dropdown-item"
                [routerLink]="['/routePath']"
                routerLinkActive="router-link-active"
              >
                Another action
              </a>
            </li>
            <li><hr class="dropdown-divider" /></li>
            <li>
              <a
                class="dropdown-item"
                [routerLink]="['/routePath']"
                routerLinkActive="router-link-active"
              >
                Something else here
              </a>
            </li>
          </ul>
        </li>
      </ul>
    </div>
  </div>
</nav>


--- SERVICE CRUD ---

// Angular
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { HttpClient, HttpHeaders } from '@angular/common/http';
// Environment variables
import { environment } from 'src/environments/environment';
// Model
import { Hospital } from '../models/Hospital';

// Para hacerlo global si necesidad de importarlo en app module
@Injectable({
  providedIn: 'root',
})
export class HospitalesService {
  constructor(private _http: HttpClient) {}

  /**
   * Petición get para recoger todos los elementos
   * @returns {Observable<any>} Observable al cual nos suscribiremos en el componente
   */
  getHospitales(): Observable<any> {
    const request = environment.API_HOSPITALES + '/webresources/hospitales';
    return this._http.get(request);
  }

  /**
   * Petición get para recoger solo un elemento
   * @param {string} id ID del elemento para la petición
   * @returns {Observable<any>} Observable al cual nos suscribiremos en el componente
   */
  findHospital(id: string): Observable<any> {
    const request =
      environment.API_HOSPITALES + '/webresources/hospitales/' + id;
    return this._http.get(request);
  }

  /**
   * Petición delete para eliminar un elemento
   * @param {string} id ID del elemento para la petición
   * @returns {Observable<any>} Observable al cual nos suscribiremos en el componente
   */
  deleteHospital(id: string): Observable<any> {
    const request =
      environment.API_HOSPITALES + '/webresources/hospitales/' + id;
    return this._http.delete(request);
  }

  /**
   * Petición put para actualizar un elemento
   * @param {Hospital} hospital Nuevo hospital para actualizar
   * @returns {Observable<any>} Observable al cual nos suscribiremos en el componente
   */
  updateHospital(hospital: Hospital): Observable<any> {
    const header = new HttpHeaders().set('Content-Type', 'application/json');
    const request = environment.API_HOSPITALES + '/webresources/hospitales/put';
    return this._http.put(request, JSON.stringify(hospital), {
      headers: header,
    });
  }

  /**
   * Petición post para insertar un elemento
   * @param {Hospital} hospital Nuevo hospital para insertar
   * @returns {Observable<any>} Observable al cual nos suscribiremos en el componente
   */
  createHospital(hospital: Hospital): Observable<any> {
    const header = new HttpHeaders().set('Content-Type', 'application/json');
    const request =
      environment.API_HOSPITALES + '/webresources/hospitales/post';
    return this._http.post(request, JSON.stringify(hospital), {
      headers: header,
    });
  }
}


--- SERVICE AUTH ---

// Angular
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { HttpClient, HttpHeaders } from '@angular/common/http';
// Environment variables
import { environment } from 'src/environments/environment';

/**
 * Servicio agnostico de otros componentes/servicios. Permite validar cualquier peticion a la API con un header de autenticacion.
 */
@Injectable({
  providedIn: 'root',
})
export class AuthService {
  constructor(private _http: HttpClient) {}

  /**
   * Metodo privado. Interactua con getAuthorizationToken para guardar en el localStorage el nuevo token.
   * @returns El valor del nuevo token.
   */
  setToken(): Promise<string> {
    return new Promise((res, rej) => {
      this.getAuthorizationToken().subscribe((response) => {
        const tokenString: string = response.response;
        localStorage.setItem('token', tokenString);
        res(response.response);
      });
    });
  }

  /**
   * Metodo privado. Lee de localStorage el token, sino lo encuentra, lo genera a traves de setToken
   * @returns El valor del nuevo token.
   */
  async getToken(): Promise<string | null> {
    let token = localStorage.getItem('token');

    if (token === null) {
      token = await this.setToken();
    }

    return token;
  }

  /**
   * Recupera un token de autenticacion del servidor.
   * @returns Devuelve la peticion post para recuperar el token del servidor.
   */
  getAuthorizationToken(): Observable<any> {
    const request = environment.API_PLANTILLA + '/Auth/Login';

    const credentials = {
      userName: 'rey',
      password: '7839',
    };

    return this._http.post(request, credentials);
  }

  /**
   * Envuelve la peticion proveyendola de un header de autenticacion.
   * @param callback Funcion de la peticion del usuario.
   * @param args Argumentos para la funcion pasada por parametro.
   * @returns Devuelve una copia de la funcion de la peticion original del usuario con el header de autenticacion.
   */
  async authInterceptor(callback: Function, ...args: any[]): Promise<Function> {
    const token = await this.getToken();

    const headers = new HttpHeaders().set('Authorization', 'bearer ' + token);

    const _callback = callback;

    callback = () => {
      return _callback(...args, headers);
    };

    return callback;
  }
}


--- COMPONENT AUTH ---

// Angular
import { Component, OnInit } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
// Services
import { AuthService } from 'src/app/services/auth.service';
import { PlantillaService } from 'src/app/services/plantilla.service';
// Models
import { Plantilla } from 'src/app/models/plantilla';

@Component({
  selector: 'app-empleados',
  templateUrl: './empleados.component.html',
  styleUrls: ['./empleados.component.css'],
})
export class EmpleadosComponent implements OnInit {
  public plantilla!: Plantilla[];

  constructor(
    private servicePlantilla: PlantillaService,
    private authService: AuthService
  ) {}

  /**
   * Carga los empleados del servidor. Actualiza la variable public plantilla para mostrar los empleados al usuario.
   */
  async loadEmpleados(): Promise<void> {
    /*
      LLamamos al metodo auth para recoger la funcion copia provista del header.
      Para no perder el contexto de la peticion original, le damos el contexto del service al que pertenece.
    */
    const validatedCall = await this.authService.authInterceptor(
      this.servicePlantilla.getEmpleados.bind(this.servicePlantilla)
    );

    /*
      La funcion copia de auth es la misma que una peticion http.
      Si hay un código existente en localStorage, pero no es válido, devolverá un error 401 y se reseteara el token.
    */
    validatedCall().subscribe(
      (res: Plantilla[]) => (this.plantilla = res),
      (err: HttpErrorResponse) => {
        if (err.status == 401)
          this.authService.setToken().then(() => this.loadEmpleados());
      }
    );
  }

  ngOnInit(): void {
    this.loadEmpleados();
  }
}


  /**
   * Petición get para recoger todos los elementos
   * @returns {Observable<any>} Observable al cual nos suscribiremos en el componente
   */
  getEmpleados(headers: HttpHeaders): Observable<any> {
    const request = environment.API_PLANTILLA + '/api/Empleados/';
    return this._http.get(request, { headers: headers });
  }


--- COMPONENT FORM Y PARAMS ---

// Base
import {
  Component,
  OnInit,
  ElementRef,
  ViewChild,
} from '@angular/core';
// Models
import { Empleado } from '../models/empleado';
// Service
import { EmpleadosService } from '../services/empleados.service';
// Rutas
import { ActivatedRoute, ParamMap, Router } from '@angular/router';

@Component({
  selector: 'app-empleados-oficio',
  templateUrl: './empleados-oficio.component.html',
  styleUrls: ['./empleados-oficio.component.css'],
})
export class EmpleadosOficioComponent implements OnInit {
  // Form inputs
  @ViewChild("cajanumero") cajaNumero!: ElementRef;
  @ViewChild("cajanombre") cajaNombre!: ElementRef;
  @ViewChild("cajalocalidad") cajaLocalidad!: ElementRef;

  constructor(private empleadosService: EmpleadosService, private route: ActivatedRoute, private router: Router) {}

  redirect(num: number) {
    this.router.navigate(['numerodoble', num]);
  }

  ngOnInit(): void {
    this.empleadosService
      .getOficios()
      .subscribe((response) => (this.oficios = response));

    this.route.paramMap.subscribe((params: ParamMap) => {
      // Parseamos a número
      const num = +params.get('num')!;
    });
  }
}

<form #createForm="ngForm">
  <label>Id: </label>
  <input
    type="number"
    class="form-control"
    name="cajanumero"
    #cajanumero
  /><br />
  <label>Nombre</label>
  <input type="text" class="form-control" name="cajanombre" #cajanombre /><br />
  <label>Localidad</label>
  <input
    type="text"
    class="form-control"
    name="cajalocalidad"
    #cajalocalidad
  /><br />
  <button class="btn btn-info" (click)="insertarDepartamento()">Create</button>
</form>

